/*
    Система Защиты Информации Кобра-NT
    Авторское право (C) 2002,2003 СЦПС "Спектр"
    Все права защищены

    Класс базового обьекта
*/

#ifndef __CBASE_H__
#define __CBASE_H__

#include "scf/ibase.h"

/**
 * Этот класс в идеале должен являться базовым для всех остальных классов.
 * Он определяет базовый интерфейс, который должен быть воплощен в любом
 * другом обьекте. Это позволяет выполнять некоторое количество базовых
 * операций с любым обьектом.
 */
class ctBase : public iBase
{
  /// Счетчик ссылок на данный обьект
  int RefCount;

protected:
  /**
   * Разрушить данный обьект. Деструктор является виртуальным, так как
   * функция DecRef() может его вызвать; при этом нам нужно вызвать
   * деструктор производного от ctBase класса, а не только деструктор
   * класса ctBase.
   */
  virtual ~ctBase ();

public:
  /**
   * Инициализация обьекта. Изначально значение счетчика ссылок
   * устанавливается равным единице. Поэтому если после создания обьекта
   * сразу же вызвать функцию DecRef(), он тут же будет уничтожен.
   */
  ctBase ()
  { RefCount = 1; }

  /**
   * Увеличить счетчик ссылок на данный обьект.
   * Каждый раз, когда мы копируем указатель на любой обьект для
   * длительного хранения, необходимо вызывать эту функцию для того,
   * чтобы обьект знал о том, что он все еще кому-то нужен. При этом
   * он не допустит своего разрушения до того, как счетчик ссылок
   * станет равным нулю.
   */
  virtual void IncRef ()
  { RefCount++; }

  /**
   * Уменьшить счетчик ссылок на данный обьект.
   * Когда мы завершаем работу с некоторым обьектом, вместо деструктора
   * необходимо вызвать эту функцию. При достижении счетчиком ссылок нуля
   * обьект автоматически саморазрушится. Использование этого механизма
   * гарантирует недопущение разрушения обьекта до того, как он перестает
   * быть нужным.
   */
  virtual void DecRef ();

  /**
   * Узнать количество ссылок на данный обьект.
   * Наличие этой функции не совсем оправдано, но иногда, возможно для
   * отладки, такая функция может понадобиться.
   */
  virtual int GetRefCount ()
  { return RefCount; }
};

#endif // __CBASE_H__
